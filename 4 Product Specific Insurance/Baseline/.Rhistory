set.seed(1)
next_pois <- function(t, x) {
U <- runif(1)
return(t - (1/x) * log(U))
}
set.seed(1)
next_pois <- function(t, x) {
U <- runif(1)
return(t - (1/x) * log(U))
}
mu_t = function(t){
return(1/(t+12))
}
next_dep <- function(t, lambda) {
flag = 1
while(flag){
U1 <- runif(1)
t = t - (1/lambda) * log(U1)
U2 <- runif(1)
if (U2 <= mu_t(t)/lambda) {
T_s <- t
flag = 0
}
}
return (T_s)
}
set.seed(1)
next_pois <- function(t, x) {
U <- runif(1)
return(t - (1/x) * log(U))
}
mu_t = function(t){
return(1/(t+12))
}
next_dep <- function(t, lambda) {
flag = 1
while(flag){
U1 <- runif(1)
t = t - (1/lambda) * log(U1)
U2 <- runif(1)
if (U2 <= mu_t(t)/lambda) {
T_s <- t
flag = 0
}
}
return (T_s)
}
new_month <- function(t, months) {
if (floor(t) %in% months) {
return(FALSE)
} else {
return(TRUE)
}
}
#Monthly poisson process parameter for arrivals
lambda <- 3
#Yearly poisson process parameter for claims
alpha <- 3.5
#Starting capital
c_0 <- 50000
#Capital floor
C <- 30000
#Fixed monthly fee
M <- 300
### Output Variables ################################
#We first define a list which records if the firm went below the threshold C.
B <- c()
### Main Loop ########################################
#We next define a for loop, so we run the simulation for 1000 iterations.
for (k in 1:1000) {
### Starting Parameters #################
#Start at time 0
t <- 0
#Number of arrivals by time t
n_A <- 0
#Number of departures by time t
n_D <- 0
#Number of claims by time t
n_C <- 0
#We run simulation for 12 months
total_t <- 12
### State variables ######################
#Number of customers currently in system
n_0 <- 0
#Defines our current cost accrued
cost <- 0
#Defines our current revenue generated
rev <- 0
#Describes what month we are currently in
months <- c(0)
### Event variables ######################
#Define time of next arrival from Poisson process
t_A <- next_pois(t, lambda)
#Define time of next departure
t_D <- Inf
#Define list of next claims
t_C <- c(Inf)
### 12 Month Loop ########################
while(t <= total_t){
#Calculate whether we are in new month yet
if (new_month(t, months)) {
#If yes, then add monthly income to revenue
months <- c(months, floor(t))
rev <- rev + M*n_0
}
#If there is arrival
if ((t_A <= t_D) & (all(t_A <= t_C))){
#Set time to time of next arrival
t <- t_A
#Add arrival to number of arrivals
n_A <- n_A + 1
#Count arrival in system count
n_0 <- n_0 + 1
#Calculate next arrival time
t_A <- next_pois(t, lambda)
#On first iteration, we now calculate time to next claim
t_C[n_A] <- next_pois(t, (alpha/12))
#On first iteration, we need to calculate next departure time
if (n_A == 1) {
t_D <- next_dep(t, lambda)
}
}
#If there is a departure
else if ((t_D < t_A) & all((t_D < t_C))) {
#Set time to time of next departure
t <- t_D
#Subtract departure from system count
n_0 <- n_0 - 1
#Add departure to departure count
n_D <- n_D + 1
#Calculate next departure
t_D <- next_dep(t, lambda)
}
#If there is a claim
else if (any((t_C < t_A)) & any((t_C < t_D))){
#Set time to time of next claim
t <- min(t_C)
#Add one claim to claim count
n_C <- n_C+1
#Generate next claim time
t_C[which.min(t_C)] <- next_pois(t, (alpha/12))
##Calculate pay-out
#Generate random uniform variable
pay_out_p <- runif(1)
#If the variable is less than 0.6, then execute code
if (pay_out_p <= 0.6){
#Calculate random variable, multiply by 10, and obtain its upper integer
X <- ceiling(10*runif(1))
#Calculate pay-out based on this
pay_out <- 300*X + 500
#Add it to the running total
cost <- cost + pay_out
}
}
}
#Checks if they are below the threshold
if ((c_0 - cost + rev) <= C) {
#If they are, add a 1 to the list
B <- c(B,1)
} else{
#If they are not, add a 0 to the list
B <- c(B,0)
}
}
B
#Count values of 1s, the function stores the 1s count at index 2
value_count <- table(B)
#Calculate P as described above
P <- value_count[2] / length(B)
#Output P
P
set.seed(1)
next_pois <- function(t, x) {
U <- runif(1)
return(t - (1/x) * log(U))
}
mu_t = function(t){
return(1/(t+12))
}
next_dep <- function(t, lambda) {
flag = 1
while(flag){
U1 <- runif(1)
t = t - (1/lambda) * log(U1)
U2 <- runif(1)
if (U2 <= mu_t(t)/lambda) {
T_s <- t
flag = 0
}
}
return (T_s)
}
new_month <- function(t, months) {
if (floor(t) %in% months) {
return(FALSE)
} else {
return(TRUE)
}
}
gen_sample_mean_var = function(n, Z, Z_bar, S_sq){
Z_bar_new = Z_bar + (Z-Z_bar)/(n+1)
S_sq_new = (1-(1/n))*S_sq + (n+1)*(Z_bar_new - Z_bar)^2
return(c(Z_bar_new,S_sq_new))
}
#Monthly poisson process parameter for arrivals
lambda <- 3
#Yearly poisson process parameter for claims
alpha <- 3.5
#Starting capital
c_0 <- 50000
#Capital floor
C <- 30000
#Fixed monthly fee
M <- 300
### Output Variables ################################
k_90 <- 0
C_12_90 <- 0
S_sq_90 <- 0
### Other Initialisations ############################
#We need to initialise the first variance, that being 0
S_sq <- 0
#And the start of the counter
k <- 1
### Main Loop ########################################
#We next define a while loop, so we run the simulation for 3000 iterations.
while (k < 3000) {
### Starting Parameters #################
#Start at time 0
t <- 0
#Number of arrivals by time t
n_A <- 0
#Number of departures by time t
n_D <- 0
#Number of claims by time t
n_C <- 0
#We run simulation for 12 months
total_t <- 12
### State variables ######################
#Number of customers currently in system
n_0 <- 0
#Defines our current cost accrued
cost <- 0
#Defines our current revenue generated
rev <- 0
#Describes what month we are currently in
months <- c()
### Event variables ######################
#Define time of next arrival from Poisson process
t_A <- next_pois(t, lambda)
#Define time of next departure
t_D <- Inf
#Define list of next claims
t_C <- c(Inf)
### 12 Month Loop ########################
while(t <= total_t){
#Here we check we have not entered a new month yet
if (new_month(t, months)) {
months <- c(months, floor(t))
rev <- rev + M*n_0
}
#If there is arrival
if ((t_A <= t_D) & (all(t_A <= t_C))){
#Set time to time of next arrival
t <- t_A
#Add arrival to number of arrivals
n_A <- n_A + 1
#Count arrival in system count
n_0 <- n_0 + 1
#Calculate next arrival time
t_A <- next_pois(t, lambda)
#On first iteration, we now calculate time to next claim
t_C[n_A] <- next_pois(t, (alpha/12))
#On first iteration, we need to calculate next departure time
if (n_A == 1) {
t_D <- next_dep(t, lambda)
}
}
#If there is a departure
else if ((t_D < t_A) & all((t_D < t_C))) {
#Set time to time of next departure
t <- t_D
#Subtract departure from system count
n_0 <- n_0 - 1
#Add departure to departure count
n_D <- n_D + 1
#Calculate next departure
t_D <- next_dep(t, lambda)
}
#If there is a claim
else if (any((t_C < t_A)) & any((t_C < t_D))){
#Set time to time of next claim
t <- min(t_C)
#Add one claim to claim count
n_C <- n_C+1
#Generate next claim time
t_C[which.min(t_C)] <- next_pois(t, (alpha/12))
##Calculate pay-out
#Generate random uniform variable
pay_out_p <- runif(1)
#If the variable is less than 0.6, then execute code
if (pay_out_p <= 0.6){
#Calculate random variable, multiply by 10, and obtain its upper integer
X <- ceiling(10*runif(1))
#Calculate pay-out based on this
pay_out <- 300*X + 500
#Add it to the running total
cost <- cost + pay_out
}
}
}
### Estimation Section ###
#We first our simulated capital at the end of 12 months
C_12 <- (c_0 - cost + rev)
#If it is the first iteration, we set the sample mean to our first estimate
if (k == 1){
C_12_bar <- C_12
}
#We now generate our next sample mean and variance
out <- gen_sample_mean_var(k, C_12, C_12_bar, S_sq)
#We then retrieve these values
C_12_bar <- out[1]
S_sq <- out[2]
#We then print this to assess convergence
#print(sqrt(S_sq/k))
#We then check we have satisfied our requirements for confidence interval, the last condition ensures we     record only the first time we satisfy this requirement
if (sqrt(S_sq/k) < (500/1.645) & k != 1 & (C_12_90+k_90+S_sq_90 == 0)){
#We then collect our output values
C_12_90 <- C_12_bar
k_90 <- k
S_sq_90 <- S_sq
}
#We then add to counter
k <- k+1
}
C_12_90
k_90
S_sq_90
S_90 <- sqrt(S_sq_90/k_90)
S_90
